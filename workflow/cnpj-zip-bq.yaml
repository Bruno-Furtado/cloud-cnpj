main:
  params: [config]
  steps:
    - set_variables:
        assign:
          - globals: ${config}

    - send_initial_alert:
        call: log_and_alert
        args:
          message: "üèÇ Workflow de ingest√£o iniciado."
          severity: "INFO"
          globals: ${globals}

    - start_job:
        try:
          call: googleapis.run.v1.namespaces.jobs.run
          args:
            name: ${"namespaces/" + globals.project_id + "/jobs/" + globals.job_name}
            location: ${globals.location}
          result: job_response
        except:
          as: job_error
          steps:
            - handle_job_error:
                next: wait_for_job_completion

    - wait_for_job_completion:
        steps:
          - sleep_before_checking:
              call: sys.sleep
              args:
                seconds: 600

          - check_job_status:
              call: googleapis.run.v1.namespaces.jobs.get
              args:
                name: ${"namespaces/" + globals.project_id + "/jobs/" + globals.job_name}
                location: ${globals.location}
              result: job_response

          - extract_job_conditions:
              assign:
                - job_conditions: ${job_response.status.conditions}
                - job_completed: false
                - job_failed: false

          - process_job_conditions:
              for:
                value: condition
                in: ${job_conditions}
                steps:
                  - check_job_completed:
                      switch:
                        - condition: ${(condition.type == "Completed" or condition.type == "Ready") and condition.status == "True"}
                          assign:
                            - job_completed: true
                  - check_job_failed:
                      switch:
                        - condition: ${(condition.type == "Completed" or condition.type == "Ready") and condition.status == "False"}
                          assign:
                            - job_failed: true

          - check_job_conditions:
              switch:
                - condition: ${job_failed}
                  next: send_job_status_failure_alert
                - condition: ${job_completed}
                  next: send_job_status_success_alert
                - condition: true
                  next: sleep_before_checking

    - send_job_status_failure_alert:
        call: log_and_alert
        args:
          message: ${"‚ùå O Cloud Run Job " + globals.job_name + " finalizou com falha."}
          severity: "ERROR"
          globals: ${globals}
        next: workflow_end

    - send_job_status_success_alert:
        call: log_and_alert
        args:
          message: ${"‚úÖ O Cloud Run Job " + globals.job_name + " finalizou com sucesso."}
          severity: "INFO"
          globals: ${globals}
        next: trigger_transfers

    - trigger_transfers:
        parallel:
          branches:
            - process_transfer_0:
                steps:
                  - execute_transfer_0:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[0].id}
                        transfer_name: ${globals.transfer_configs[0].name}
                        globals: ${globals}
            - process_transfer_1:
                steps:
                  - execute_transfer_1:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[1].id}
                        transfer_name: ${globals.transfer_configs[1].name}
                        globals: ${globals}
            - process_transfer_2:
                steps:
                  - execute_transfer_2:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[2].id}
                        transfer_name: ${globals.transfer_configs[2].name}
                        globals: ${globals}
            - process_transfer_3:
                steps:
                  - execute_transfer_3:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[3].id}
                        transfer_name: ${globals.transfer_configs[3].name}
                        globals: ${globals}
            - process_transfer_4:
                steps:
                  - execute_transfer_4:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[4].id}
                        transfer_name: ${globals.transfer_configs[4].name}
                        globals: ${globals}
            - process_transfer_5:
                steps:
                  - execute_transfer_5:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[5].id}
                        transfer_name: ${globals.transfer_configs[5].name}
                        globals: ${globals}
            - process_transfer_6:
                steps:
                  - execute_transfer_6:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[6].id}
                        transfer_name: ${globals.transfer_configs[6].name}
                        globals: ${globals}
            - process_transfer_7:
                steps:
                  - execute_transfer_7:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[7].id}
                        transfer_name: ${globals.transfer_configs[7].name}
                        globals: ${globals}
            - process_transfer_8:
                steps:
                  - execute_transfer_8:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[8].id}
                        transfer_name: ${globals.transfer_configs[8].name}
                        globals: ${globals}
            - process_transfer_9:
                steps:
                  - execute_transfer_9:
                      call: execute_transfer
                      args:
                        transfer_id: ${globals.transfer_configs[9].id}
                        transfer_name: ${globals.transfer_configs[9].name}
                        globals: ${globals} 

    - execute_scheduled_query:
        call: execute_transfer
        args:
          transfer_id: ${globals.scheduled_query.id}
          transfer_name: ${globals.scheduled_query.name}
          globals: ${globals} 

    - send_final_alert:
        call: log_and_alert
        args:
          message: "ü´° O workflow foi finalizado. Verifique as logs para obter mais detalhes."
          severity: "INFO"
          globals: ${globals}
        next: workflow_end

    - workflow_end:
        return:
            status: "unknown"
            message: "ü´° O workflow foi finalizado. Verifique as logs para obter mais detalhes."

log_and_alert:
  params: [message, severity, globals]
  steps:
    - log_message:
        call: sys.log
        args:
          text: ${message}
          severity: ${severity}
    - send_alert:
        call: http.post
        args:
          url: ${globals.slack_webhook_url}
          body:
            text: ${message}

execute_transfer:
  params: [transfer_id, transfer_name, globals]
  steps:
    - start_transfer:
        try:
          call: googleapis.bigquerydatatransfer.v1.projects.locations.transferConfigs.startManualRuns
          args:
            parent: ${"projects/" + globals.project_id + "/locations/" + globals.location + "/transferConfigs/" + transfer_id}
            body:
              requestedRunTime: ${time.format(sys.now())}
          result: transfer_response
        except:
          as: transfer_error
          steps:
            - handle_tranfer_error:
                call: log_and_alert
                args:
                  message: ${"‚ùå Erro ao executar o transfer " + transfer_name + "."}
                  severity: "ERROR"
                  globals: ${globals}
            - exit_transfer:
                return:

    - extract_transfer_state:
        assign:
          - transfer_state: ${transfer_response.runs[0].state}

    - send_transfer_alert:
        call: log_and_alert
        args:
          message: ${"üîÑ Transfer√™ncia " + transfer_name + " conclu√≠da com status " + transfer_state + "."}
          severity: "INFO"
          globals: ${globals}